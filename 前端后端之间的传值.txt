EL表达式：

语法结构：${expression}，可用在所有的HTML和JSP标签中，作用是代替JSP页面中复杂的JAVA代码.
在js中使用要加双引号，如var a = "${input}";

[]与.运算符
      EL 提供.和[]两种运算符来存取数据。
      当要存取的属性名称中包含一些特殊字符，如.或?或-等并非字母或数字的符号，就一定要使用 []。
 例如：
      ${user.My-Name}应当改为${user["My-Name"] }
      如果要动态取值时，就可以用[]来做，而.无法做到动态取值。例如：
      	${sessionScope.user[data]}中data 是一个变量

变量：
    EL存取变量数据的方法很简单，例如：${username}。它的意思是取出某一范围中名称为username的变量。
	因为我们并没有指定哪一个范围的username，所以它会依序从
	Page页面范围、Request请求对象、Session会话范围、Application应用范围查找。
            假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传null。

EL表达式语言中定义了11个隐含对象，使用这些隐含对象可以很方便地获取web开发中的一些常见对象，并读取这些对象的数据。
1 	pageContext 	对应于JSP页面中的pageContext对象（注意：取的是pageContext对象。）
2 	pageScope 	    代表page域中用于保存属性的Map对象
3 	requestScope 	代表request域中用于保存属性的Map对象
4 	sessionScope 	代表session域中用于保存属性的Map对象
5 	applicationScope代表application域中用于保存属性的Map对象
6 	param 	        表示一个保存了所有请求参数的Map对象
7 	paramValues 	表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是一个string[]
8 	header 	        表示一个保存了所有http请求头字段的Map对象，注意：如果头里面有“-” ，例Accept-Encoding，则要header[“Accept-Encoding”]
9 	headerValues 	表示一个保存了所有http请求头字段的Map对象，它对于某个请求参数，返回的是一个string[]数组。
10 	cookie 	        表示一个保存了所有cookie的Map对象
11 	initParam 	    表示一个保存了所有web应用初始化参数的map对象



JSP标准标记库（JSTL）
第一步，下载jar包，在每个JSP顶部使用<taglib>指令<%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
一些核心标签<c:out> <c:set>

<c:set value=”值1” var=”name1” [scope=”page|request|session|application”]/>
	含义：把一个变量名为name1,值为“值1”的变量存储在指定的scope范围内，默认为page
	
<c:set value=”值3” target=”JavaBean对象” property=”属性名”/>
　　含义：把一个值为“值3”赋值给指定的JavaBean的属性名。相当与setter()方法。

取出可用EL表达式，例如${sessionScope.name1}
也可用out标签嵌套，<c:out value="${applicationScope.name2}">未得到name2的值</c:out>

<c:forEach var="m" items="${map}">
	<c:out value="${m.key.route_name }"/>
	<c:forEach var="s" items="${m.value }">
		<c:out value="${s.st_name }"/>
	</c:forEach>
</c:forEach>

<c:if test="${reply!=null }"></c:if>


Struts标签库
<%@ taglib prefix="s" uri="/struts-tags"%>
如 <s:form> <s:property> <s:iterator>

对Map<Route,List<Station>> map的遍历：
<s:iterator value="map" var="b">
	<s:property value="key.route_name"/>,<s:iterator value="value">
		<s:property value="st_name"/>-->
	</s:iterator><br/>
</s:iterator>



Ognl
OGNL表达式语言的真正目的，是为了在那些不能写JAVA代码的地方执行JAVA代码，或者是为了更方便地执行JAVA代码

如何将参数从界面传递到Action？
只需在Action中定义相关的属性（要有getters/setters方法），然后界面传参的名称跟这些属性保持一致即可。
普通的数据类型，将可自动转换。(空字符串转换为int类型时将报错)
也可以放入page、request、session、application中，在Action里取到

如何将数据从Action传输到JSP?
1.通过Action的属性传输。
	action的属性赋值后，在转向之后的JSP页面可通过<s:property value="属性名"/>来取值，这个是在value stack中，不用加#
	此时如果有两个相同的名称，该怎么取
	
2.通过ActionContext传输。
	在action的方法中，ActionContext.getContext().put("name", "王五");这个是在stack context中
	在转向之后的JSP中，<s:property value="#name"/>，即可取到
	也可以<s:property value="name"/>先在Action中寻找，再到ActionContext中找
	
3.通过request/session等传输
	存入ServletActionContext.getRequest().setAttribute
		ServletActionContext.getRequest().getSession().setAttribute
		ActionContext.getContext().getSession().put
	
	取出<s:property value="#request.sex"/>
		<s:property value="#attr.postcode"/>依次搜索page/request/session/application scope取值
		${requestScope.sex }					
		
		
		
		



在Action中调用addActionMessage/addActionError方法，会添加到Value Stack中的actionMessages/actionErrors
在JSP中要取到Value Stack的值，可用<s:property value=" “/>标签，可是添加一本图书后value stack为什么有两个名字一样的Object？
也许跟转发与重定向有关系，是跟action链有关，不好弄，这样导致我很难取值


Action访问Servlet API，如HttpServletRequest、HttpSession、ServletContext分别代表JSP内置对象中的request、session、application
是通过ActionContext类，



angularJs与springMVC


















