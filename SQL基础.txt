Sql语句中的DDL、DML、DCL的介绍
	DDL is Data Definition Language statements.数据定义语言，用于定义和管理 SQL 数据库中的所有对象的语言
		1.CREATE - 创建
		2.ALTER - 修改
		3.DROP - 删除
		4.TRUNCATE - TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。
			DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。
		5.COMMENT - 注释
		6.GRANT - 授权
		7.REVOKE - 收回已经授予的权限
	
	DML is Data Manipulation Language statements. 数据操作语言，SQL中处理数据等操作统称为数据操纵语言
		1.SELECT - 查询
		2.INSERT - 添加
		3.UPDATE - 更新
		4.DELETE - 删除

	DCL is Data Control Language statements. 数据控制语言，用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等
		1.COMMIT - 提交
		2.SAVEPOINT - 保存点
		3.ROLLBACK - 回滚
		4.SET TRANSACTION - 设置当前事务的特性，它对后面的事务没有影响．

创建一个数据库，设定编码为UTF-8
create database bus default character set utf8;

创建一个表，设定主键，自增长，字段含义
create table USER
   (ID int auto_increment primary key COMMENT '用户标识',
	NAME     VARCHAR(100) unique COMMENT '用户姓名',
	PASSWORD VARCHAR(100) COMMENT '用户密码',
	TYPE     VARCHAR(500) COMMENT '用户类型'
   );
   
用一条SQL语句增加多条记录
insert into station(st_name)
select '站名1' union
select '站名2' union
select '站名3';

修改、更新记录
UPDATE Person SET FirstName = 'Fred' WHERE LastName = 'Wilson';
update a set a = b.a, b=b.b, c=b.c from t a,t b where (a.条件1) and (b.条件2)

删除记录
DELETE FROM Person WHERE Id = 1;
DELETE p1 FROM Person p1, Person p2 WHERE p1.Email = p2.Email AND p1.Id > p2.Id;

给已建好的表加上唯一性约束
alter table 'station' add unique('st_name');

当not in 子查询有null值时，没有结果返回。可用not exists
有两个简单例子，以说明 “exists”和“in”的效率问题
1) select * from T1 where exists(select 1 from T2 where T1.a=T2.a);
   T1数据量小而T2数据量非常大时，T1<<T2 时，1)的查询效率高。
   
2) select * from T1 where T1.a in (select T2.a from T2);
    T1数据量非常大而T2数据量小时，T1>>T2 时，2)的查询效率高。
通过使用EXISTS，Oracle会首先检查主查询，然后运行子查询直到它找到第一个匹配项，这就节省了时间。Oracle在执行IN子查询时，系统先将主查询挂起，
首先执行子查询，并将获得的结果列表存放在一个加了索引的临时表中，再执行主查询。这也就是使用EXISTS比使用IN通常查询速度快的原因

在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。
例如：
SELECT Customer,SUM(OrderPrice) FROM Orders
GROUP BY Customer
HAVING SUM(OrderPrice)<2000

时间格式：  以2007-11-02   13:45:25为例
  
        yy      two    digits 两位年                显示值:07
        yyy    three  digits 三位年                显示值:007
        yyyy  four    digits 四位年                显示值:2007
              
        mm     number     两位月              显示值:11
        mon    abbreviated 字符集表示          显示值:11月,若是英文版,显示nov     
        month spelled out 字符集表示          显示值:11月,若是英文版,显示november 
          
        dd      number         当月第几天        显示值:02
        ddd    number         当年第几天        显示值:02
        dy      abbreviated   当周第几天简写    显示值:星期五,若是英文版,显示fri
        day    spelled out    当周第几天全写    显示值:星期五,若是英文版,显示friday        
        ddspth spelled out, ordinal twelfth 
             
        hh    two digits 12小时进制            显示值:01
        hh24 two digits 24小时进制            显示值:13
              
        mi    two digits 60进制                显示值:45
              
        ss    two digits 60进制                显示值:25

        Q      digit         季度                  显示值:4
        WW  digit         当年第几周            显示值:44
         W    digit          当月第几周            显示值:1
              
        24小时格式下时间范围为： 0:00:00 - 23:59:59....      
        12小时格式下时间范围为： 1:00:00 - 12:59:59 .... 

时间函数：
to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')                          日期转化为字符串   
to_date('2004-05-07 13:23:44','yyyy-mm-dd hh24:mi:ss')     字符串转化为日期

--sql server 日期格式与字符串互相转换  
--字符串转换成日期：CONVERT(datetime, '2015-06-15', 120)   CONVERT(datetime, '2015-06-15 23:10:10', 120)
--日期转换成字符串：
--CONVERT(varchar(10), t.applyTime, 120): 2006-05-16
--CONVERT(varchar(100), t.applyTime, 120): 2006-05-16 10:57:49
--CONVERT(varchar(100), t.applyTime, 8): 10:57:46

计算函数：

23.FLOOR
对给定的数字取整数
SQL> select floor(2345.67) from dual;
FLOOR(2345.67)
--------------
          2345
		  
26.MOD(n1,n2)
返回一个n1除以n2的余数
SQL> select mod(10,3),mod(3,3),mod(2,3) from dual;
MOD(10,3)  MOD(3,3)  MOD(2,3)
--------- --------- ---------
        1         0         2

28.ROUND 
按照指定的精度进行舍入
SELECT ROUND(column_name,decimals) FROM table_name
SQL> select round(55.5,0),round(-55.4,0),trunc(55.55,1),trunc(-55.55,1) from dual;
ROUND(55.5) ROUND(-55.4) TRUNC(55.5) TRUNC(-55.5)
----------- ------------ ----------- ------------
         56          -55          55.6          -55.6

35.TRUNC
按照指定的精度截取一个数,不进行四舍五入
/***************数字********************/
Number 需要截尾取整的数字。 
Num_digits 用于指定取整精度的数字。Num_digits 的默认值为 0。
TRUNC()函数截取时不进行四舍五入
*/
9.select trunc(123.458) from dual --123
10.select trunc(123.458,0) from dual --123
11.select trunc(123.458,1) from dual --123.4
12.select trunc(123.458,-1) from dual --120
13.select trunc(123.458,-4) from dual --0
14.select trunc(123.458,4) from dual --123.458
15.select trunc(123) from dual --123
16.select trunc(123,1) from dual --123
17.select trunc(123,-1) from dual --120

/**************日期********************/
1.select trunc(sysdate) from dual --2013-01-06 今天的日期为2013-01-06
2.select trunc(sysdate, 'mm') from dual --2013-01-01 返回当月第一天.
3.select trunc(sysdate,'yy') from dual --2013-01-01 返回当年第一天
4.select trunc(sysdate,'dd') from dual --2013-01-06 返回当前年月日
5.select trunc(sysdate,'yyyy') from dual --2013-01-01 返回当年第一天
6.select trunc(sysdate,'d') from dual --2013-01-06 (星期天)返回当前星期的第一天
7.select trunc(sysdate, 'hh') from dual --2013-01-06 17:00:00 当前时间为17:35 
8.select trunc(sysdate, 'mi') from dual --2013-01-06 17:35:00 
TRUNC()函数没有秒的精确
 
36.ADD_MONTHS
增加或减去月份
SQL> select to_char(add_months(to_date('1999-12','yyyy-mm'),2),'yyyy-mm') from dual;
TO_CHA
------
2000-02

37.LAST_DAY
返回日期的最后一天，当月的最后一天？
SQL> select last_day(sysdate) from dual;
LAST_DAY(S
----------
31-5月 -04

38.MONTHS_BETWEEN(date2,date1)
给出date2-date1的月份
SQL> select months_between('19-12月-1999','19-3月-1999') mon_between from dual;
MON_BETWEEN
-----------
          9
SQL>selectmonths_between(to_date('2000.05.20','yyyy.mm.dd'),to_date('2005.05.20','yyyy.mm.dd')) mon_betw from dual;
 MON_BETW
---------
      -60
	  
40.NEXT_DAY(date,weekday)
从date这天开始算下周x是哪天
SQL> select next_day('18-5月-2001','星期五') next_day from dual;
NEXT_DAY
----------
25-5月 -01	  

50.TO_NUMBER
将给出的字符转换为数字
SQL> select to_number('1999') year from dual;
     YEAR
---------
     1999

Oracle：
今日：
 and trunc(t.operatetime)=trunc(sysdate)
本周：
 and trunc(t.operatetime)>=trunc(next_day(sysdate-8,1)+1) and trunc(t.operatetime)<=trunc(next_day(sysdate-8,1)+7)+1
本月：
 and t.operatetime >=TRUNC(SYSDATE, 'MM') and t.operatetime<=last_day(SYSDATE)
上月：
 and to_char(i.begintime,'yyyyMM')=to_char(add_months(sysdate,-1),'yyyyMM') 
本年度：
 and to_char(t.operatetime,'yyyy')=to_char(sysdate,'yyyy')

sql server 日期格式与字符串互相转换  
--字符串转换成日期：CONVERT(datetime, '2015-06-15', 120)   CONVERT(datetime, '2015-06-15 23:10:10', 120)
--日期转换成字符串：
--CONVERT(varchar(10), t.applyTime, 120): 2006-05-16
--CONVERT(varchar(100), t.applyTime, 120): 2006-05-16 10:57:49
--CONVERT(varchar(100), t.applyTime, 8): 10:57:46

一些题目：
1.Rank Scores。
Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. 
Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, 
there should be no "holes" between ranks.

Before:
+----+-------+       
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

After:
+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

2.Department Top Three Salaries
Write a SQL query to find employees who earn the top three salaries in each of the department. 

+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
+----+-------+--------+--------------+

3.Delete Duplicate Emails
Write a SQL query to delete all duplicate email entries in a table named Person, 
keeping only unique emails based on its smallest Id.

+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+

4.ROUND AND IF
The Trips table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to 
the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).

+----+-----------+-----------+---------+--------------------+----------+
| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|
+----+-----------+-----------+---------+--------------------+----------+
| 1  |     1     |    10     |    1    |     completed      |2013-10-01|
| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|
| 3  |     3     |    12     |    6    |     completed      |2013-10-01|
| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|
| 5  |     1     |    10     |    1    |     completed      |2013-10-02|
| 6  |     2     |    11     |    6    |     completed      |2013-10-02|
| 7  |     3     |    12     |    6    |     completed      |2013-10-02|
| 8  |     2     |    12     |    12   |     completed      |2013-10-03|
| 9  |     3     |    10     |    12   |     completed      |2013-10-03| 
| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|
+----+-----------+-----------+---------+--------------------+----------+

5.每门课前两名

Answer:
1.1 select t1.Score, sum(1) as Rank from Scores t1, (select distinct score from Scores) as t2 where t1.score<=t2.score group by t1.id order by rank;
1.2 select Score, (select count(distinct Score) from Scores as t2 where t2.Score >= t1.Score ) as Rank from Scores as t1 order by rank;

2.1 select e.*,s.Rank from Employee e,(select t.Salary,t.DepartmentId,(select count(distinct Salary) from Employee e where Salary>=t.Salary and DepartmentId = t.DepartmentId) Rank from Employee t) s where e.Salary = s.Salary and e.DepartmentId = s.DepartmentId and s.Rank <= 3 order by e.DepartmentId,s.Rank;
2.2 SELECT emp.NAME,emp.Salary,emp.DepartmentId FROM Employee emp WHERE (SELECT count(DISTINCT Salary) FROM Employee WHERE DepartmentId = emp.DepartmentId AND Salary > emp.Salary ) < 3 order by emp.DepartmentId, emp.Salary Desc;
2.3 SELECT * FROM (SELECT e.*,(SELECT count(DISTINCT Salary) FROM Employee WHERE Salary >= e.Salary AND DepartmentId = e.DepartmentId ) Rank FROM Employee e) t WHERE t.Rank <= 3 ORDER BY t.DepartmentId,t.Rank;

3.1 DELETE FROM Person WHERE Id NOT IN (SELECT Id FROM (SELECT min(Id) AS Id FROM Person GROUP BY Email) p);
3.2 DELETE p1 FROM Person p1, Person p2 WHERE p1.Email = p2.Email AND p1.Id > p2.Id;

4.1 SELECT Request_at AS DAY, ROUND(COUNT(IF(Status != 'completed', TRUE, NULL)) / COUNT(*), 2) AS 'Cancellation Rate' FROM Trips WHERE (Request_at BETWEEN '2013-10-01' AND '2013-10-03')  GROUP BY Request_at;

5.1 SELECT * FROM score A WHERE ( SELECT COUNT(*) FROM score B WHERE B.cno = A.cno AND B.degree >= A.degree ) <= 2 ORDER BY A.cno, A.degree DESC