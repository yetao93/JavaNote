大概想法：RocketMQ（另外专题学习）、dubbo、zookeeper

Q: 说一下的 dubbo 的工作原理？
A: dubbo 分成哪些层，然后平时怎么发起 rpc 请求的，注册、发现、调用 TODO
	
Q: 注册中心挂了可以继续通信吗？
A: 可以，因为刚开始初始化的时候，消费者会将提供者的地址等信息拉取到本地缓存，所以注册中心挂了可以继续通信。

Q: dubbo 支持哪些通信协议、序列化协议？
A: 通信协议
		dubbo协议，单一长连接，NIO异步通信，基于 hessian 作为序列化协议。适合传输数据量小（每次请求100kb以内），但是并发量很高。
		rmi协议，Java二进制序列化，多个短连接，适合消费者和提供者数量差不多的情况，适用于文件的传输，一般较少用。
		hessian 协议，hessian 序列化协议，多个短连接，适用于提供者数量比消费者数量还多的情况，适用于文件的传输，一般较少用。
		http 协议，json序列化
		webservice协议，SOAP 文本序列化。

Q: 说一下 hessian 的数据结构？
A: Hessian 的对象序列化机制有 8 种原始类型
			原始二进制数据
			boolean
			64-bit date（64 位毫秒值的日期）
			64-bit double
			32-bit int
			64-bit long
			null
			UTF-8 编码的 string
	还包括 3 种递归类型：
			list for lists and arrays
			map for maps and dictionaries
			object for objects
	还有一种特殊的类型：
			ref：用来表示对共享对象的引用。

Q: PB 知道吗？为什么 PB 的效率是最高的？
A: Protocol Buffer 是 Google 出品的一种轻量并且高效的结构化数据存储格式，性能比 JSON、XML 要高很多。
	性能如此好，主要得益于两个：第一，它使用 proto 编译器，自动进行序列化和反序列化，速度非常快，应该比 XML 和 JSON 快上了 20~100 倍；
			第二，它的数据压缩效果好，就是说它序列化后的数据量体积小。因为体积小，传输起来带宽和速度上会有优化。

Q: dubbo 负载均衡策略、高可用策略、动态代理策略 ？
A: 负载均衡策略见《项目系统设计》
	
	高可用策略（集群容错策略）
			failover cluster 模式，失败自动切换，自动重试其他机器，默认就是这个，常见于读操作。
			failfast cluster 模式，一次调用失败就立即失败，常见于非幂等性的写操作，比如新增一条记录，调用失败就立即失败。
			failsafe cluster 模式，出现异常时忽略掉，常用于不重要的接口调用，比如记录日志。
			failback cluster 模式，失败了后台自动记录请求，然后定时重发，比较适合于写消息队列这种。
			forking cluster 模式，并行调用多个 provider，只要一个成功就立即返回。常用于实时性要求比较高的读操作，但是会浪费更多的服务资源。
			broadcacst cluster，逐个调用所有的 provider。任何一个 provider 出错则报错，通常用于通知所有提供者更新缓存或日志等本地资源信息。
	
	动态代理策略
			默认使用 javassist 动态字节码生成，创建代理类。但是可以通过 spi 扩展机制配置自己的动态代理策略。

Q: dubbo 的 spi 思想是什么？
A: service provider interface
	TODO ，看样子就是面向接口编程

Q: 如何基于 dubbo 进行服务治理、服务降级、失败重试以及超时重试？
A: 服务治理
			1. 调用链路自动生成，各个服务之间的调用自动记录下来，将各个服务之间的依赖关系和调用链路生成出来
			2. 服务访问压力以及时长统计，自动统计各个接口和服务之间的调用次数以及访问延时。分成两个级别，
					2.1 第一个级别是接口粒度，就是每个服务的每个接口每天被调用多少次，延时多少。
					2.2 第二个级别是从源头入口开始，一个完整的请求链路经过几十个服务之后，完成一次请求，每天全链路走多少次，全链路请求延时多少。
					这样才能看到当前系统的压力主要在哪，如何扩容和优化。
			3. 服务分层（避免循环依赖）、调用链路失败监控和报警、服务鉴权、每个服务的可用性的监控

	失败重试和超时重试
			服务 A 调用服务 B 失败了，比如抛异常、连接超时、响应超时，此时根据异常类型决定是否同实例进行重试或者切换实例重试。
			
	服务降级
			服务 A 调用服务 B，结果服务 B 挂掉了，服务 A 重试几次调用服务 B，还是不行，那么直接降级，走一个备用的逻辑，给用户返回响应。
	

Q: 如何自己设计一个类似 dubbo 的 rpc 框架？
A: 考察的是对这类框架的原理是否了解。

	首先要有个注册中心，自己的服务注册上去，可以用zk来做。
	消费者去注册中心拿服务信息和对应的机器列表。
	消费者发起请求，基于动态代理，使用负载均衡算法找到一个机器
	使用netty发送，数据格式可以使用hessian序列化协议
	提供者也生成动态代理，监听网络端口，接收到请求时，调用对应的服务代码。

Q: zookeeper 都有哪些使用场景？
A: 分布式协调
			A 系统发送请求之后可以在 zookeeper 上对某个节点的值注册个监听器，一旦 B 系统处理完了就修改 zookeeper 那个节点的值，
			A 系统立马就可以收到通知。

	分布式锁
			详见《系统项目设计》
			
	元数据/配置信息管理
			作为注册中心。
			
	HA高可用性
			重要进程做主备两个，主进程挂了立马通过zk感知到切换备用。
			主进程创建临时节点，备用注册监听器，如果主挂了，该临时节点会被删除，此时会发通知给备用进程，备用成为主进程，再次创建相同节点。
			
	感觉zookeeper的作用就两个，创建节点、注册监听器。

Q: zookeeper相关的知识点？
A: https://www.w3cschool.cn/zookeeper/zookeeper_overview.html


zookeeper 是什么？
zookeeper 都有哪些功能？
zookeeper 有几种部署模式？
zookeeper 怎么保证主从节点的状态同步？
集群中为什么要有主节点？
集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？
说一下 zookeeper 的通知机制？







