Spring Boot、Spring Cloud全家桶

Q: Hystrix 是干什么的？
A: 在分布式系统中，每个服务都可能会调用很多其他服务，被调用的那些服务就是依赖服务，有的时候某些依赖服务出现故障也是很正常的。
	Hystrix 可以让我们在分布式系统中对服务间的调用进行控制，加入一些调用延迟或者依赖故障的容错机制。
	Hystrix 通过将依赖服务进行资源隔离，进而阻止某个依赖服务出现故障时在整个系统所有的依赖服务调用中进行蔓延；
		同时Hystrix 还提供故障时的 fallback 降级机制。
		
	总而言之，Hystrix 帮助我们提升分布式系统的可用性和稳定性。

Q: 线程池资源隔离、信号量资源隔离有什么区别，适用场景？
A: 线程池隔离是让容器线程通过Hystrix线程池里的线程去调用其他服务，如果Hystrix线程池满了，容器线程可以快速返回。
	通过command key确定command group（自己的线程池）
			优点：
					任何一个依赖服务都可以被隔离在自己的线程池内，即使自己的线程池资源填满了，也不会影响任何其他的服务调用。
					当一个故障的依赖服务重新变好的时候，可以通过清理掉线程池，瞬间恢复该服务的调用，而如果是 tomcat 线程池被占满，再恢复就很麻烦。
					基于线程池的异步本质，可以在同步的调用之上，构建一层异步调用层。
					
			缺点：
					增加了 CPU 的开销，除了 tomcat 本身的调用线程之外，还有 hystrix 自己管理的线程池。
					请求在线程池中执行，会带来任务调度、排队和上下文切换带来的开销。
					因为涉及到跨线程，那么就存在ThreadLocal数据的传递问题，比如在主线程初始化的ThreadLocal变量，在线程池线程中无法获取。
					 
	信号量隔离类似于限流里的令牌桶，只是一道关卡，让容器线程需要获准通过这道关卡后，容器线程自己去调用其他服务。
			缺点：不支持超时，同步调用。
	
	适用场景：
			线程池技术，适合绝大多数场景，比如说我们对依赖服务的网络请求的调用和访问、需要对调用的 timeout 进行控制（捕捉 timeout 超时异常）。
			信号量技术，适合不涉及网络访问 请求，而是对内部的一些比较复杂的业务逻辑的访问。不会有timeout类似的问题。
			
Q: Hystrix 执行时内部原理？
A: https://github.com/doocs/advanced-java/blob/master/docs/high-availability/hystrix-process.md 
	TODO
	
Q: 选择阿里的 Sentinel 还是 Hystrix？
A: Hystrix 的关注点在于以隔离和熔断为主的容错机制，超时或被熔断的调用将会快速失败，并可以提供 fallback 机制。
	Sentinel 的侧重点在于：多样化的流量控制、熔断降级、系统负载保护、实时监控和控制台。
	
	
	
	
	
	
	
	
	
	
	
	
	