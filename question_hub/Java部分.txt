大概想法：并发源码、各种锁、线程安全

Q: Java代码的执行流程？
A: Java代码在编译后变成Java字节码，字节码被类加载器加载到JVM里，JVM执行字节码，最终转化为汇编指令在CPU上执行。

Q: volatile的介绍、应用和底层实现？
A: volatile是轻量级的synchronized，它保证了共享变量的可见性，确保能够被准确和一致地更新。即当一个线程修改一个共享变量时，另一个线程能读到这个修改的值。

Q: volatile
A: 

Q: CAS算法

Q: 可重入锁有哪些？如何实现的可重入性？

Q: AQS的非公平和公平锁如何实现的？

Q: synchronized实现锁的原理？

Q: Volatile的可见性如何实现的？更新指令步骤是什么？

Q: cas是如何实现自旋的？语义是什么？它是悲观锁还是乐观锁？

Q: jmm模型描述一遍？

Q: 类的加载机制？类的初始化器有哪些？双亲委派方式？

Q: 死锁是什么，怎么办？
A: 1. 避免一个线程获取多个锁。2. 避免一个线程在锁内同时占用多个资源。3. 使用定时锁，lock.tryLock(timeout)来替代使用内部锁机制。

Q: 并发编程存在的问题？
A: 由于软硬件的资源限制，如网络、硬盘、CPU等，并发的代码可能仍在串行执行，这时程序不仅不会加快反而更慢，因为增加了上下文切换和资源调度的时间。

Q: 如何解决并发编程的问题？
A: 对于硬件资源限制，既然单机有上限，可以使用集群并行执行程序，通过负载均衡算法，让多个服务器处理数据。
    对于软件资源限制，可以考虑使用资源池进行复用。