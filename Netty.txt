2.NIO入门

2.1传统的BIO编程 (Block I/O) 同步阻塞I/O
网络编程的基本模型是Client/Server模型，也就是两个进程之间进行互相通信，其中服务端提供位置信息（绑定的IP地址和监听端口），客户端
通过连接操作向服务端监听的地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方通过网络套接字Socket进行通信。

在基于传统同步阻塞模型开发中，ServerSocket负责绑定IP地址，启动监听端口；Socket负责发起连接操作。连接成功后通过输入和输出流进行
同步阻塞式通信。

BIO的主要问题在于每当有个新的客户请求接入时，服务端必须创建一个新的线程处理它，一个线程只能处理一个客户端连接。当线程数膨胀，
系统的性能将急剧下降，随着并发访问量的继续增大，系统会发生线程堆栈溢出、创建新线程失败等问题，并最终导致进程宕机或者僵死。


2.2伪异步I/O编程
采用线程池和任务队列实现1个或多个线程处理N个客户端的模型，底层通信机制依然使用同步阻塞I/O
线程池可以设置消息队列的大小和最大线程数，因此它的资源占用是可控的，避免了线程资源耗尽问题。

Java输入流InputStream的read方法进行读取时会阻塞线程，直到有数据可读或读取完毕或发生异常。
输出流OutputStream的write方法写输出流时也会阻塞线程，直到所有要发生的字节全部写入完毕或发生异常。

读和写操作是同步阻塞的，阻塞时间取决对方I/O线程的处理速度和网络I/O的传输速度。
如果通信对方返回应答时间过长，会引起级联故障。

 
2.3 NIO编程(Non-block I/O)  非阻塞I/O 
缓冲区Buffer。在NIO库中，所有数据都使用缓冲区处理的。缓冲区实质上是一个数组，通常为ByteBuffer字节数组。

NIO提供了SocketChannel和ServeSocketChannel来代替Socket和ServeSocket两种不同的套接字通道实现。
这两种新增的通道都支持阻塞和非阻塞两种模式。
低负载、低并发的应用程序可以选择阻塞I/O以降低编程复杂度
高负载、高并发的网络应用需要选择NIO的非阻塞模式。

多路复用器Selector
Selector会不断地轮询注册在其上的Channel，如果某个Channel上面有新的TCP连接介入、读和写事件，这个Channel就处于就绪状态，
会被Selector轮询出来，然后通过SelectorKey可以获取就绪Channel的集合，进行后续的I/O操作。
一个Selector可以同时轮询多个Channel，由于JDK使用了epoll()代替传统的select实现，所以没有最大连接句柄的限制

优点：1.客户端发起的连接操作是异步的，可以通过在多路复用器注册OP_CONNECT等待后续结果，不需要像之前的客户端那样被同步阻塞。
2.SocketChannel的读写操作都是异步的，如果没有可读写的数据它不会同步等待，直接返回，这样I/O通信线程就可以处理其他的链路。
3.线程模型的优化，JDK的Selector没有连接句柄数的限制，可以同时处理成千上万个客户端连接，性能不会下降。


2.4 NIO2.0 AIO编程  异步I/O
引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。NIO2.0异步套接字通道是真正的异步非阻塞I/O，
不需要多路复用器Selector，简化了NIO的编程模型。

获取操作结果：在执行异步操作时传入一个java.nio.channels。CompletionHandle接口的实现类作为操作完成的回调。


3.Netty入门应用
书上用的版本是netty-all-5.0.0.Alphal，我下载来netty-4.0.36.Final，有些地方不一样，比如ChannelHandlerAdapter类
项目详见Netty-com.netty.framework

Channel是连接的通道，是ChannelEvent的产生者，而ChannelPipeline可以理解为ChannelHandler的集合。
Channel是通讯的载体，而ChannelHandler负责Channel中的逻辑处理，ChannelPipeline是ChannelHandler的容器
一个Channel包含一个ChannelPipeline，所有ChannelHandler都会注册到ChannelPipeline中，并按顺序组织起来。

ChannelEvent是数据或者状态的载体，例如传输的数据对应MessageEvent，状态的改变对应ChannelStateEvent。
当对Channel进行操作时，会产生一个ChannelEvent，并发送到ChannelPipeline。ChannelPipeline会选择一个ChannelHandler进行处理。
这个ChannelHandler处理之后，可能会产生新的ChannelEvent，并流转到下一个ChannelHandler。

ChannelPipeline包含两条线路：Upstream和Downstream。
Upstream对应上行，接收到的消息、被动的状态改变，都属于Upstream。
Downstream对应下行，发送的消息、主动的状态改变，都属于Downstream。

对应的，ChannelPipeline里包含的ChannelHandler也包含两类：ChannelUpstreamHandler和ChannelDownstreamHandler。
每条线路的Handler是互相独立的。
ChannelPipeline接口包含了两个重要的方法:sendUpstream(ChannelEvent e)和sendDownstream(ChannelEvent e),
分别对应Upstream和Downstream


一些handler
Netty对粘包/拆包的解决方案一：换行符
利用LineBasedFrameDecoder + StringDecoder组合按行切换文本，项目Netty-com.netty.bags

LineBasedFrameDecoder工作原理是它依次遍历ByteBuf中的可读字节，判断是否有"\n"或者"\r\n"，如果有就以此为结束位置，为一行
它是以换行符为结束标志的解码器，支持携带结束符或者不携带结束符两种解码方式，同时支持配置单行的最大长度。
如果连续读取到最大长度后仍然没有发现换行符，就会抛出异常，同时忽略掉之前读到的异常码流。

StringDecoder将接收到的对象ByteBuf转换成字符串，然后继续调用前面的handler

解决方案二：自定义分隔符
用DelimiterBasedFrameDecoder完成以自定义分隔符做结束标志的消息的解码
ByteBuf delimiter = Unpooled.copiedBuffer("$_".getBytes());
ch.pipeline().addLast(new DelimiterBasedFrameDecoder(1024,delimiter));

解决方案三：指定长度
用FixedLengthFrameDecoder完成按照指定长度对消息进行自动解码
ch.pipeline().addLast(new FixedLengthFrameDecoder(20));


编解码技术，编码-发送-接收-解码
基于Java提供的对象输入/输出流ObjectInputStream和ObjectOutputStream可以直接把Java对象作为可储存的字节数组写入文件或传输。
基于JDK默认的序列化机制可以避免操作底层的字节数组，Java序列化的目的主要有两个：网络传输和对象持久化
缺点有：无法跨语言、序列化后的码流太大、序列化性能太低

Netty Java序列化：
ObjectDecoder负责对实现Serializable的POJO对象进行解码
ObjectEncoder负责编码





















